# -*- coding: utf-8 -*-
"""giphyIntegration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10rwRbrQwzTnZEOGDUR1huI8tRGaYzjgT
"""

import os

os.environ["GIPHY_API_KEY"] = "1OxymsAFp6eP2eZfVp7RVZh1ySVmB5Ra" #esta key tenemos que cambiarla si ganamos

import random
import requests

GIPHY_API_KEY = os.getenv("GIPHY_API_KEY")  
DEFAULT_RATING = "pg"          # "g", "pg", "pg-13"
DEFAULT_LANG = "es"            # "en", "es", etc.

def giphy_translate_one(query: str, *, api_key: str = None, rating: str = DEFAULT_RATING, lang: str = DEFAULT_LANG, timeout: int = 7) -> str:
    """
    Usa GIPHY /translate para obtener un único GIF (la mejor coincidencia).
    Devuelve la URL del GIF (original) o "" si no hay resultados.
    """
    api_key = api_key or GIPHY_API_KEY
    if not api_key:
        raise ValueError("Falta GIPHY_API_KEY")

    try:
        r = requests.get(
            "https://api.giphy.com/v1/gifs/translate",
            params={"api_key": api_key, "s": query, "rating": rating, "lang": lang},
            timeout=timeout,
        )
        r.raise_for_status()
        data = r.json().get("data", {})
        return data.get("images", {}).get("original", {}).get("url", "") or ""
    except Exception:
        return ""


def giphy_search_one(query: str, *, api_key: str = None, rating: str = DEFAULT_RATING, lang: str = DEFAULT_LANG, timeout: int = 7, limit: int = 10, random_pick: bool = True) -> str:
    """
    Usa GIPHY /search para obtener hasta 'limit' resultados y escoger 1.
    random_pick=True selecciona uno al azar para variedad, si no, toma el primero.
    Devuelve la URL del GIF (original) o "" si no hay resultados.
    """
    api_key = api_key or GIPHY_API_KEY
    if not api_key:
        raise ValueError("Falta GIPHY_API_KEY")

    try:
        r = requests.get(
            "https://api.giphy.com/v1/gifs/search",
            params={"api_key": api_key, "q": query, "limit": limit, "rating": rating, "lang": lang},
            timeout=timeout,
        )
        r.raise_for_status()
        items = r.json().get("data", [])
        if not items:
            return ""
        pick = random.choice(items) if random_pick and len(items) > 1 else items[0]
        return pick.get("images", {}).get("original", {}).get("url", "") or ""
    except Exception:
        return ""


def giphy_medieval_congrats(reason: str = "") -> str:
    """
    Conveniencia: intenta un tema medieval con la 'reason' como pista.
    1) translate con frase compuesta
    2) fallback a search
    """
    base = "medieval celebration"
    q = f"{base} {reason}".strip()
    url = giphy_translate_one(q)
    if url:
        return url
    # fallback: buscar con más resultados para tener chance
    return giphy_search_one(q, limit=8, random_pick=True)



# tests

# tests = [
#     "felicitaciones",
#     "buen trabajo"
# ]

# for q in tests:
#     print("—"*60)
#     print("Query:", q)

# print("—"*60)
# print("medieval_congrats(reason='por el deploy a tiempo') →", giphy_medieval_congrats("por el deploy a tiempo"))